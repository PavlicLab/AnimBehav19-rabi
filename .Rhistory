combos[which(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
), ]
tweaker(combos[,1:5],2, num.tries = 1)->a
a <- t(do.call("cbind",a))
a<-cbind(a,apply(a,1, function(x) ifelse(x[1]==x[2],1,0)))
a
tweaker(combos[,1:5],2, num.tries = 1)->a
a <- t(do.call("cbind",a))
a<-cbind(a,apply(a,1, function(x) ifelse(odd(x[1]),1,0)))
a
for (i in 0:6) {
for (j in 0:6){
print((a[which((a[,1] == i | a[,2] == i) & (a[,3]==j | a[,4]==j)), 5:6]))
}
}
a
combos <- gtools::permutations(7, 6, repeats.allowed = TRUE) - 1
combos <-
combos[which(combos[,6] %in% 0:1), ]
combos <-
combos[which(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
), ]
tweaker(combos[,1:5],2, num.tries = 1)->a
a <- t(do.call("cbind",a))
a
combos <- gtools::permutations(7, 6, repeats.allowed = TRUE) - 1
combos <-
combos[which(combos[,6] %in% 0:1), ]
combos <-
combos[which(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
), ]
tweaker(combos[,1:5],2, num.tries = 20)->a
a <- t(do.call("cbind",a))
a
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
#combos <-
# combos[which(combos[,6] %in% 0:1), ]
combos <-
combos[which(
(odd(combos[,1]) & even(combos[,2]) ) |
(even(combos[,1]) & odd(combos[,2]) )
), ]
# combos <-
#   combos[which(
#     (odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
#       (even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
#   ), ]
tweaker(combos[,1:5],2, num.tries = 20)->a
a <- t(do.call("cbind",a))
a
a<-cbind(a,apply(a,1, function(x) ifelse(odd(x[1]),1,0)))
for (i in 0:6) {
for (j in 0:6){
print((a[which((a[,1] == i | a[,2] == i) & (a[,3]==j | a[,4]==j)), 5:6]))
}
}
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
#combos <-
# combos[which(combos[,6] %in% 0:1), ]
combos <-
combos[which(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
), ]
tweaker(combos[,1:5],2, num.tries = 1)->a
a <- t(do.call("cbind",a))
a
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
combos <-
combos[which(
(((odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))) & odd(combos[,5])) |
(((odd(combos[,1]) & odd(combos[,2]) & even(combos[,3]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,2]) & odd(combos[,3]) & odd(combos[,4]))) & even(combos[,5]))
), ]
tweaker(combos[,1:5],2, num.tries = 1)->a
a <- t(do.call("cbind",a))
a
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
#combos <-
# combos[which(combos[,6] %in% 0:1), ]
combos <-
combos[which(
(((odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))) & odd(combos[,5])) |
(((odd(combos[,1]) & odd(combos[,2]) & even(combos[,3]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,2]) & odd(combos[,3]) & odd(combos[,4]))) & even(combos[,5]))
), ]
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
a
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
#combos <-
# combos[which(combos[,6] %in% 0:1), ]
combos <-
combos[which(
(((odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))) & odd(combos[,5])) |
(((odd(combos[,1]) & odd(combos[,2]) & even(combos[,3]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,2]) & odd(combos[,3]) & odd(combos[,4]))) & even(combos[,5]))
), ]
tweaker(combos[,1:5],2, num.tries = 10)->a
a <- t(do.call("cbind",a))
a
a<-cbind(a,apply(a,1, function(x) ifelse(odd(x[1]),1,0)))
for (i in 0:6) {
for (j in 0:6){
print((a[which((a[,1] == i | a[,2] == i) & (a[,3]==j | a[,4]==j)), 5:6]))
}
}
a[which((a[,1] == i | a[,2] == i) & (a[,3]==j | a[,4]==j)), 5:6]
i=6;j=5
a[which((a[,1] == i | a[,2] == i) & (a[,3]==j | a[,4]==j)), ]
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
#combos <-
# combos[which(combos[,6] %in% 0:1), ]
combos <-
combos[which(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
), ]
tweaker(combos[,1:5],2, num.tries = 1)->a
a <- t(do.call("cbind",a))
a<-cbind(a,apply(a,1, function(x) ifelse(odd(x[1]),1,0)))
a
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
a<-cbind(a,apply(a,1, function(x) ifelse(odd(x[1]),1,0)))
a
for (i in 0:6) {
for (j in 0:6){
print((a[which((a[,1] == i | a[,2] == i) & (a[,3]==j | a[,4]==j)), 5:6]))
}
}
permutations(3,2,letters[1:3])
permutations(3,2,letters[1:4])
permutations(3,2,letters)
join(permutations(3,2,letters),1:2)
plyr::join(permutations(3,2,letters),1:2)
expand.grid(permutations(3,2,letters),1:2)
expand.grid(0:6,0:6,0:6)
expand.grid(0:6,0:6,0:6,0:6,0:13)
as.matrix(expand.grid(0:6,0:6,0:6,0:6,0:13))
as.matrix(expand.grid(0:6,0:6,0:6,0:6,0:13))->combos
combos <-
combos[which(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
), ]
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
a
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
dim(combos)
as.matrix(expand.grid(0:6,0:6,0:6,0:6,0:13))->combos
dim(combos)
combos <-
combos[which(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
), ]
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
a
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
combos <-
combos[which(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
), ]
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
a
a
a[which(a[,1]==4 & a[,2]==4)]
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
combos <-
combos[which(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4])) |
((combos[,1] == combos[,2]) & (combos[,3] == combos[,4]))
), ]
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
dim(combos[which(((combos[,1] == combos[,2]) & (combos[,3] == combos[,4]))),])
dim(combos[which((odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4]))),])
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
combos <-
combos[which(
((
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
) & odd(combo[,5])) |
(
(combos[,1] == combos[,2]) & (combos[,3] == combos[,4]) & even(combos[,5])
)
), ]
combos <-
combos[which(
((
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
) & odd(combos[,5])) |
(
(combos[,1] == combos[,2]) & (combos[,3] == combos[,4]) & even(combos[,5])
)
), ]
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
a
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
combos <-
combos[which(
(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
)
), ]
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
a
combos <-
combos[which(
(
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
)
), ]
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
a
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
combos <-
combos[which(
((
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
) ) |
(
(combos[,1] == combos[,2]) & (combos[,3] == combos[,4]))
)
), ]
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
combos <-
combos[which(
((
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
) ) |
(
(combos[,1] == combos[,2]) & (combos[,3] == combos[,4])
)
), ]
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
a
a[which((a[,1] == a[,2]) & (odd(a[,5])), ]
a[which((a[,1] == a[,2]) & odd(a[,5])), ]
a[which((a[,1] == a[,2]) & even(a[,5])), ]
a[which((a[,1] == a[,2])), ]
a[which((odd(a[,1]) & even(a[,2]))), ]
a[which((even(a[,1]) & odd(a[,2]))), ]
codes <- rabi::reed_solomon(total_length = 5, redundancy = 2, alphabet = 8)
#turn the list of codes into a matrix for ease of editing
codes <- t(do.call("cbind",codes))
codes <- codes[which(
(odd(codes[,1]) & even(codes[,2]) & even(codes[,3]) & odd(codes[,4])) |
(odd(codes[,2]) & even(codes[,1]) & even(codes[,4]) & odd(codes[,3]))
), ]
codes
combos <- gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
combos <-
combos[which(
((
(odd(combos[,1]) & odd(combos[,3]) & even(combos[,2]) & even(combos[,4])) |
(even(combos[,1]) & even(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
) )
), ]
tweaker(combos[,1:5],2, num.tries = 5)->a
a <- t(do.call("cbind",a))
a
a<-cbind(a,apply(a,1, function(x) ifelse(odd(x[1]),1,0)))
for (i in 0:6) {
for (j in 0:6){
print((a[which((a[,1] == i | a[,2] == i) & (a[,3]==j | a[,4]==j)), 5:6]))
}
}
codes
a
rep(1)
rep(1,4)
rep(1:2,4)
rep(c(1,2),4)
rep(1:4, 2)
rep(1:4, each = 2)
list(happy = 1:10, name = "squash")
rep(fred, 5)
fred <- list(happy = 1:10, name = "squash")
rep(fred, 5)
b<-list(0:6)
rep(b,4)
expand.grid(rep(b,3))
expand.grid(rep(b,3)) %>% as.matrix()
gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
gtools::permutations(7, 5, repeats.allowed = TRUE) - 1
seq_len(4)
rep(seq_len(total_length),3)
list(seq_len(4))
rep(list(seq_len(total_length)),3)
perms <- rep(list(seq_len(alphabet)),total_length)
df <- as.matrix(expand.grid(perms))-1
df
df- gtools::permutations(alphabet, total_length - 1, repeats.allowed = TRUE) - 1
df- gtools::permutations(alphabet, total_length, repeats.allowed = TRUE) - 1
dim(df)
dim(gtools::permutations(alphabet, total_length, repeats.allowed = TRUE) - 1)
codes <- rabi::reed_solomon(total_length = 5, redundancy = 2, alphabet = 8)
codes <- t(do.call("cbind",codes))
}3%%2
3%%2
37%%2
odd <- function(x){ x %% 2 == 1 }
odd(2)
odd(7)
odd(888)
!odd(888)
codes <- rabi::reed_solomon(total_length = 5, redundancy = 2, alphabet = 8)
codes <- t(do.call("cbind",codes))
odd <- function(x){ x %% 2 == 1 }
codes <-
codes[which(odd(codes[,1]) & odd(codes[,3]) & !odd(codes[,2]) & !odd(codes[,4])), ]
codes
dim(codes)
perms <- rep(list(seq_len(alphabet)),total_length)
combos <- as.matrix(expand.grid(perms)) - 1
combo.list <- split(combos, 1:nrow(combos))
combo.list
perms <- rep(list(seq_len(alphabet)),total_length)
combos <- as.matrix(expand.grid(perms)) - 1
combos <- split(combos, 1:nrow(combos))
#only keep sequences that fit our constraints
combos <-
combos[which(odd(combos[,1]) & odd(combos[,3]) & !odd(combos[,2]) & !odd(combos[,4])), ]
codes <- tweaker(combos, redundancy, num.tries = 1)  #we're only running it once for speed
perms <- rep(list(seq_len(alphabet)),total_length)
combos <- as.matrix(expand.grid(perms)) - 1
combos <- split(combos, 1:nrow(combos))
combos
perms <- rep(list(seq_len(alphabet)),total_length)
combos <- as.matrix(expand.grid(perms)) - 1
#only keep sequences that fit our constraints
combos <-
combos[which(odd(combos[,1]) & odd(combos[,3]) & !odd(combos[,2]) & !odd(combos[,4])), ]
codes <- tweaker(combos, redundancy, num.tries = 1)  #we're only running it once for speed
print(codes)
length(codes)
codes <- rabi::reed_solomon(total_length = 5, redundancy = 2, alphabet = 8)
codes <- t(do.call("cbind",codes))
a<-codes
for (i in 0:6) {
for (j in 0:6){
print((a[which((a[,1] == i | a[,2] == i) & (a[,3]==j | a[,4]==j)), 5:6]))
}
}
a
for (i in 0:6) {
for (j in 0:6){
print((a[which((a[,1] == i | a[,2] == i) & (a[,3]==j | a[,4]==j)), ]))
}
}
for (i in 0:6) {
for (j in 0:6){
print((a[which(a[,3]==j | a[,4]==j), ]))
}
}
for (i in 0:6) {
for (j in 0:6){
print((a[which(a[,3]==j | a[,4]==j), -3:-4]))
}
}
perms <- rep(list(seq_len(alphabet)),total_length)
combos <- as.matrix(expand.grid(perms)) - 1
combos <- combos[which((
(odd(combos[,1]) & odd(combos[,3]) & !odd(combos[,2]) & !odd(combos[,4])) |
(!odd(combos[,1]) & !odd(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
)), ]
codes <- tweaker(combos, redundancy, num.tries = 1)  #we're only running it once for speed
print(paste0("The 'tweaked' list contains ", length(codes), " unique IDs."))
tweaker <- function(combos, redundancy, num.tries = 10, available.colors = NULL) {
{
if (missing(redundancy)) {
stop("Error: you need specify to how many erasure events the IDs should be robust. Note, an increase in robustness requires an increase in the total length of the ID. ")
}
# if (redundancy >= total_length || redundancy == 0) {
#   stop("Error: the code must be robust to at least one erasure. It also cannot be robust to a number of positions equal to or greater than the total length.")
# }
if (class(num.tries) != "numeric") {
stop(paste0("Error: the variable 'num.tries' must be of the class 'numeric,' not '", class(num.tries),".'"))
}
}
#you DON'T generate all sequences, you're given them
tester <- function(combos, redundancy) {
combo.list <- split(combos, 1:nrow(combos))
#pick a random sequence and start making the "safe" list with it
x <- sample(1:length(combo.list), 1)
new.combs <- combo.list[x]
names(new.combs) <- NULL
#remove everything too similar to the chosen sequence from the old list
combo.list <- combo.list[stringdist::seq_distmatrix(combo.list, new.combs, method = "hamming")[, length(new.combs)] > redundancy]
names(combo.list) <- 1:length(combo.list)
#do this again and again until everything is removed
while (length(combo.list) > 0) {
x <- sample(1:length(combo.list), 1)
new.combs[length(new.combs) + 1] <- (combo.list[x])
combo.list <- combo.list[stringdist::seq_distmatrix(combo.list, new.combs, method = "hamming")[, length(new.combs)] > redundancy]
if (length(combo.list) != 0) {
names(combo.list) <- 1:length(combo.list)
}
}
# print(length(new.combs)) table(unlist(seq_distmatrix(new.combs,new.combs,method='hamming')))
return(new.combs)
}
#run through the function several times and keep the best
temp1 <- NULL
temp2 <- 0
for (i in 1:num.tries) {
temp1 <- invisible(tester(combos, redundancy))
if (length(temp1) > length(temp2))
temp2 <- temp1
}
temp2 <- rabi::codes_to_colors(temp2, available.colors)
return(temp2)
}
perms <- rep(list(seq_len(alphabet)),total_length)
combos <- as.matrix(expand.grid(perms)) - 1
combos <- combos[which((
(odd(combos[,1]) & odd(combos[,3]) & !odd(combos[,2]) & !odd(combos[,4])) |
(!odd(combos[,1]) & !odd(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
)), ]
codes <- tweaker(combos, redundancy, num.tries = 1)  #we're only running it once for speed
print(paste0("The 'tweaked' list contains ", length(codes), " unique IDs."))
alphabet <- 8      # the number of colors we have
total_length <- 5  # the number of positions we want band
redundancy <- 2
perms <- rep(list(seq_len(alphabet)),total_length)
combos <- as.matrix(expand.grid(perms)) - 1
combos <- combos[which((
(odd(combos[,1]) & odd(combos[,3]) & !odd(combos[,2]) & !odd(combos[,4])) |
(!odd(combos[,1]) & !odd(combos[,3]) & odd(combos[,2]) & odd(combos[,4]))
)), ]
codes <- tweaker(combos, redundancy, num.tries = 1)  #we're only running it once for speed
print(paste0("The 'tweaked' list contains ", length(codes), " unique IDs."))
perms <- rep(list(seq_len(alphabet)),total_length)
combos <- as.matrix(expand.grid(perms)) - 1
perms <- rep(list(seq_len(alphabet)),total_length)
combos <- as.matrix(expand.grid(perms)) - 1
#only keep sequences that fit our constraints
combos <-
combos[which(odd(combos[,1]) & !odd(combos[,2])), ]
codes <- tweaker(combos, redundancy, num.tries = 1)  #we're only running it once for speed
print(paste0("The 'tweaked' list contains ", length(codes), " unique IDs."))
a<-codes
for (i in 0:6) {
for (j in 0:6){
print((a[which((a[,3]==j | a[,4]==j)&(a[,2]==i | a[,1]==i)), ]))
}
}
a
a <- t(do.call("cbind",a))
a
for (i in 0:6) {
for (j in 0:6){
print((a[which((a[,3]==j | a[,4]==j)&(a[,2]==i | a[,1]==i)), ]))
}
}
library(rabi)
?brute_IDs
how_many()
?rabi
?`rabi-package`
library(stringdist)
?message()
testit <- function() {
message("testing package startup messages")
packageStartupMessage("initializing ...", appendLF = FALSE)
Sys.sleep(1)
packageStartupMessage(" done")
}
testit()
testit <- function() warning("testit")
testit()
testit <- function() warning("problem in testit", call. = FALSE)
testit() ## no call
write(paste0("NOTE: Reed-Solomon codes require the 'alphabet size' (e.g. the number of paint colors you have) to be a prime number. Automatically adjusting to use an alphabet size of ",numbers::previousPrime(alphabet)," instead."), stderr())
message(paste0("NOTE: Reed-Solomon codes require the 'alphabet size' (e.g. the number of paint colors you have) to be a prime number. Automatically adjusting to use an alphabet size of ",numbers::previousPrime(alphabet)," instead."))
warning(paste0("NOTE: Reed-Solomon codes require the 'alphabet size' (e.g. the number of paint colors you have) to be a prime number. Automatically adjusting to use an alphabet size of ",numbers::previousPrime(alphabet)," instead."))
warning(paste0("NOTE: Reed-Solomon codes require the 'alphabet size' (e.g. the number of paint colors you have) to be a prime number. Automatically adjusting to use an alphabet size of ",numbers::previousPrime(alphabet)," instead of the entered value of ", alphabet, "."))
message("*: This indicates this parameter combination is outside what reed_solomon() accepts as input")
message("Note: The mapping (see below) that was used to assign color names to numeric values is not saved or assigned to a variable. The exact mapping may change with repeated function calls. Depending on your circumstances, you may want to record this now. \n\n")
library(rabi)
document()
library(devtools)
document()
build()
library(rabi)
d
