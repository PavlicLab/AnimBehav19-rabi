devtools::build_vignettes()
?rabi
library(rabi)
?rabi
how_many
how_many()
how_many(r=0)
total.length <- 4  #we have four positions to mark,
redundancy <- 2    #we're interested in being robust to two erasures,
alphabet <- 5      #and we currently have five types of color bands in stock
codes <- rs_IDs(total.length, redundancy, alphabet)
#Given that we specified a robustness of 2,
#there should be no counts of "dist.2" or lower
how_robust(codes)
stringdist::seq_distmatrix(codes,codes,method = "hamming"))
stringdist::seq_distmatrix(codes,codes,method = "hamming")
perms <- rep(list(seq_len(alphabet)),total.length - 1 )
perms
alphabet
alphabet <-3
perms
total.length <- 3
total.length <- 3
perms <- rep(list(seq_len(alphabet)),total.length - 1 )
perms
perms <- rep(list(seq_len(alphabet)),total.length )
perms
how_robust(perms)
df <- as.matrix(expand.grid(perms)) - 1
df
how_robust(df)
simple_IDs(4,3)
simple_IDs(4,3) %>%
how_robust()
library(tidyverse)
simple_IDs(4,3) %>% how_robust()
perms <- rep(list(seq_len(alphabet)),total.length )
df <- as.matrix(expand.grid(perms)) - 1
df
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust()
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust() %>% / 4
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust() %>% ./ 4
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust() %>% ./4
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust() %>% .+1
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust()
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust() -> dff2
dff2/2
perms <- rep(list(seq_len(alphabet)),3 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust() -> dff2
perms <- rep(list(seq_len(alphabet)),3 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust() -> dff1
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust() -> dff2
df
perms <- rep(list(seq_len(alphabet)),4 )
df <- as.matrix(expand.grid(perms)) - 1
df %>% how_robust() -> dff2
dff2
sum(dff2)
sum(dff1)
dff1
162/702
648/6480
81*81
81*81-81
brute_IDs(4,1,3,20)
brute_IDs(4,1,3,40)
brute_IDs(4,1,3,100)
brute_IDs(4,1,3,1000)
library(shiny)
library(tidyverse)
server <- function(input, output) {
output$downloadData <- downloadHandler("rabi-IDs.csv",
# This function should write data to a file given to it by
# the argument 'file'.
content = function(file) {
# Write to a file specified by the 'file' argument
write.table(ID_df, file, sep = ",", row.names = FALSE)
}
)
#############Misc Server Stuff#################
#makes a vector full of color names for randomizing
rand.colors <- colors() %>% stringr::str_extract("[a-z]+") %>% unique() %>% unlist()
rand.positions <- c("left leg", "right leg", "head", "thorax",
"abdomen", "tail", "right tibiotarsus", "forewing",
"4th toe on hindlimb", "1st digit", "3rd digit", "caudal fin")
#calculate the number of IDs generated
output$howmany <- renderText({
num.positions <- as.integer(input$num.positions)
num.robust <- as.integer(input$num.robust)
num.colors <- as.integer(input$num.colors)
paste0("With these parameters, you can get ", num.colors^(num.positions - num.robust), " unique IDs.")
})
########################Dynamic Input Boxes##################
#make the input boxes for the different color names
output$input_ui_colors <- renderUI({
num.colors <- as.integer(input$num.colors)
#if names is selected, give option for names
if (input$colornamesYN == "names") {
lapply(1:num.colors, function(i) {
textInput(paste0("n_input_colors_", i), label = paste0("Marking name #", i, " (e.g. '", sample(rand.colors,1),"'):"), value = (i-1))
})
#if numbers (default) is chosen, don't display anything
} else if (input$colornamesYN == "numbers") {
return()
#if neither, what HAPPENED?
} else {
textInput("lawdy", label = "lawdylawdylawdy", value = "lawdy me")
}
})
output$input_ui_positions <- renderUI({
num.positions <- as.integer(input$num.positions)
lapply(1:num.positions, function(i) {
textInput(paste0("n_input_position_", i), label = paste0("Position name #", i, " (e.g. '", sample(rand.positions,1),"'):"), value = (i))  })
})
########################Data Table##################
#makes the table of all your values
output$table <- renderTable({
num.positions <- as.integer(input$num.positions)
num.robust <- as.integer(input$num.robust)
num.colors <- as.integer(input$num.colors)
#if color names are chosen, take the user input
if (input$colornamesYN == "names") {
color.names <- lapply(1:num.colors, function(i) {input[[paste0("n_input_colors_", i)]]}) %>% unlist()
#else, it means numbers, so go from 0 to X-1
} else {
color.names <- as.character(0:(num.colors-1))
}
ID_lists <- rabi::rs_IDs(num.positions, num.robust, num.colors, color.names)
ID_lists %>% as.data.frame() %>% t() %>% as.data.frame() -> ID_df
rownames(ID_df) <- NULL
colnames(ID_df) <- lapply(1:dim(ID_df)[2], function(i) {input[[paste0("n_input_position_", i)]]}) %>% unlist()
##Making it a global variable so other functions can grab it
ID_df <<- ID_df
ID_df
})
##############Dynamically Adjust Selector Range##############
output$position.selector <- renderUI({
selectInput("num.positions", "Number of markable positions on animal:", choices = seq(2,input$num.colors,1))
})
output$robust.selector <- renderUI({
selectInput("num.robust", "Number of marked positions that can be erased before the ID loses guaranteed recoverability:", choices = seq(1,input$num.positions,1))
})
##############################################
}
ui <- fluidPage(
tags$title("'rabi' GUI"),
sidebarLayout(
sidebarPanel(
h1("Graphical User Interface for rabi's ID scheme generator"),
helpText(
"Note: This example uses Reed-Solomon polynomial oversampling (",
code("rs_IDs()"),
") to generate the ID sequences. ",
"Consequently, there are several stipulations that must be met:  ",
tags$ol(
tags$li("The number of unique markings used (e.g. the different colors you have at your disposal) must be a prime number. (Weird, but whatever.)"),
tags$li("The number of positions to be marked on the animal can't be greater than the number of unique markings (see above). This number does NOT need to be prime though")
)
),
radioButtons("colornamesYN", "You can choose to use numbers to refer to different markings or specify your own names.", list("Use numbers (default)" = "numbers","Replace with user-defined names (e.g. blue, indigo, striped, clipped toe, etc)" = "names"), selected = NULL),
uiOutput("position.selector"),
uiOutput("robust.selector"),
selectInput("num.colors", "Number of unique markings available (round down to the closest prime):", choices = c(2, 3, 5, 7, 11, 13 ,17, 19), selected = 3),
p(" "),
p(" "),
hr(),hr(),
uiOutput("input_ui_colors"),
downloadButton('downloadData', 'Download as a CSV')
),
mainPanel(
h4("Name the locations that will be marked on the animal."),
uiOutput("input_ui_positions"),
hr(),hr(),
h4(textOutput("howmany")),
tableOutput("table")
)
)
)
shinyApp(ui = ui, server = server)
?rabi-package
?rabi-package()
library(rabi)
?rabi-package()
?rabi
?system.file
runExample <- function() {
appDir <- system.file("gui-example", package = "rabi")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `rabi`.", call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
runExample()
list.files()
runExample <- function() {
appDir <- system.file("inst/gui-example", package = "rabi")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `rabi`.", call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
runExample()
appDir <- system.file("inst/gui-example", package = "rabi")
appDir
ls
list.files()
list.files(system.file("inst", package = "mypackage"))
appDir <- system.file("inst/gui-example")
appDir
list.files(system.file("inst", package = "rabi"))
system.file()
system.file(package="rabi")
system.file("help", package="rabi")
system.file("inst", package="rabi")
system.file("inst/", package="rabi")
list.files(system.file(package="rabi"))
---
output: github_document
---
<!-- README.md is generated from README.Rmd. Please edit that file -->
```{r, echo = FALSE}
knitr::opts_chunk$set(
collapse = FALSE,
comment = "#>",
fig.path = "README-"
)
```
# rabi
[![CRAN_Status_Badge](http://www.r-pkg.org/badges/version/rabi)](https://cran.r-project.org/package=rabi)
The goal of `rabi` is to facilitate the design and generation of color (or symbol) codes that can be used to mark and identify individual animals (specifically aimed for research projects). These codes can be selected such that the IDs are robust to partial erasure: even if parts of the code are lost, the entire identity of the animal can be reconstructed Thus, animal subjects are not confused and no ambiguity is introduced.
## Installation
You can install `rabi` from CRAN with:
```{r cran-installation, eval = FALSE}
install.packages("rabi")
```
You can also install `rabi` from github with:
```{r gh-installation, eval = FALSE}
# install.packages("devtools")
devtools::install_github("andburch/rabi")
devtools::document(),
devtools::document()
devtools::document()
devtools::document()
?exampleGUI()
devtools::document()
?exampleGUI()
?rs_IDs
?simple_IDs()
?rabi()
devtools::document()
install.packages("~/Side Projects/R sandbox/color_code_package/rabi_1.0.0.tar.gz", repos = NULL, type = "source")
?rabi
library("rabi", lib.loc="~/R/win-library/3.5")
?rabi
detach(devtools)
dettach(devtools)
?rabi
library(rabi)
?rabi
?rabi-package
?rabi-package
exampleGUI()
document()
library(devtools)
document()
devtools::use_build_ignore("NEWS.md")
rmarkdown::render("README.Rmd")
build()
install()
install.packages(c("animation", "backports", "BH", "callr", "clipr", "colorspace", "curl", "data.table", "dbplyr", "git2r", "httpuv", "httr", "jsonlite", "knitr", "openssl", "pillar", "ps", "psych", "quantreg", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "rstudioapi", "spam", "tibble", "tinytex"))
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
?render
rmarkdown::render("README.Rmd", output_format = "html_document")
rmarkdown::render("README.Rmd", output_format = "html_document")
rmarkdown::render("README.Rmd", output_format = "html_document", output_options = "self_contained: no")
rmarkdown::render("README.Rmd")
rmarkdown
?rabi
library(devtools)
document()
devtools::use_build_ignore("NEWS.md")
rmarkdown::render("README.Rmd")
build()
install()
library(rabi)
devtools::build_vignettes()
?rabi
library(rabi)
install()
library(rabi)
?rabi
?rabi
?rabi-package
detach("package:rabi", unload=TRUE)
install.packages("~/Side Projects/R sandbox/color_code_package/rabi_1.0.0.tar.gz", repos = NULL, type = "source")
library(rabi)
?rabi
?rabi-package
??rabi
??rabi-packcage
??rabi-package
??rabi
?rs_IDs
document()
document()
?stats
?how_many
?rabi
rmarkdown::render("README.Rmd")
devtools::use_readme_rmd()
rmarkdown::render("README.Rmd")
devtools::use_readme_rmd()
rmarkdown::render("README.Rmd")
document()
library(devtools)
document()
devtools::use_build_ignore("NEWS.md")
rmarkdown::render("README.Rmd")
build()
library(devtools)
document()
devtools::use_build_ignore("NEWS.md")
rmarkdown::render("README.Rmd")
build()
install()
library(rabi)
?rabi
?rabi
devtools::build_vignettes()
?rabi
?rabi
document()
devtools::use_build_ignore("NEWS.md")
rmarkdown::render("README.Rmd")
build()
build()
detach(rabi)
detach("rabi")
remove.packages("rabi", lib="~/R/win-library/3.5")
install.packages(devtools)
document()
install.packages(devtools)
install.packages(devtools)
library(devtools)
document()
devtools::use_build_ignore("NEWS.md")
rmarkdown::render("README.Rmd")
devtools::build_vignettes()
rmarkdown::pandoc_version()
?rmarkdown
rmarkdown::pandoc_available()
library(installr)
install.pandoc()
rmarkdown::pandoc_version()
rmarkdown::render("README.Rmd")
devtools::build_vignettes()
devtools::release()
rmarkdown::render("README.Rmd")
library(devtools)
document()
devtools::use_build_ignore("NEWS.md")
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
devtools::build_vignettes()
build()
devtools::release()
devtools::spell_check()
spell_check()
install.packages("spelling")
devtools::spell_check()
document()
devtools::use_build_ignore("NEWS.md")
rmarkdown::render("README.Rmd")
devtools::build_vignettes()
build()
devtools::release()
check_rhub()
check_rhub()
devtools::release()
devtools::use_build_ignore()
document()
rmarkdown::render("README.Rmd")
build()
devtools::build_vignettes()
build()
devtools::build_vignettes()
devtools::release()
check_win_devel()
devtools::release()
